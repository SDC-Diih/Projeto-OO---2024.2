import pygame
import sys
import os
import random
from Screen import Screen
screen_1 = Screen((1000,800))

class Inimigos():
    
    def __init__(self, screen_instance, prota_instance):
        
        self.screen = screen_instance.screen
        self.prota = prota_instance
        self.ini_x, self.ini_y = 0, 0
        self.Prota_mask = prota_instance.Prota_mask
        self.inimigos = []  # Lista para armazenar os inimigos

        self.dificuldade = 1
        self.vidas = 3
         
    def set_inimigos(self, col, quantidade):
        self.quantidade = quantidade
        #Cria múltiplos inimigos e os armazena na lista
        for i in range(quantidade):
            # Criação de cada inimigo
            inimigo = {
                'surface': pygame.Surface((20, 20)),
                'mask': pygame.mask.from_surface(pygame.Surface((20, 20))),
                'x': random.randint(0, self.screen.get_width()),
                'y': random.randint(0, 50),
                'speed': self.dificuldade  # Velocidade inicial
            }
            inimigo['surface'].fill(col)
            inimigo['mask'] = pygame.mask.from_surface(inimigo['surface'])
            
            self.inimigos.append(inimigo)
            
    def set_speed_inimigos(self, ini_speed):
        
        for inimigo in self.inimigos:
            inimigo['speed'] = ini_speed
        
    def movimentar_inimigos(self):
        # Ponto central da tela
        self.mid_x, self.mid_y = self.screen.get_width() // 2, self.screen.get_height() // 2
        
        teste = False
        
        for inimigo in self.inimigos:

            inimigo['y'] += inimigo['speed']

            
            while teste == True:

                # Distâncias do inimigo ao ponto central
                self.spd_mpx = inimigo['x'] - self.mid_x
                self.spd_mpy = inimigo['y'] - self.mid_y
                
                # Ajustar posição horizontalmente
                if self.spd_mpx > 5:
                    inimigo['x'] -= inimigo['speed']
                elif self.spd_mpx < -5:
                    inimigo['x'] += inimigo['speed']
                
                # Ajustar posição verticalmente
                if self.spd_mpy > 5:
                    inimigo['y'] -= inimigo['speed']
                elif self.spd_mpy < -5:
                    inimigo['y'] += inimigo['speed']
                
    def deletar_criar(self):
        #Verificar se está suficientemente próximo ao centro e DELETAR quando estiver
        
        novos_inimigos = []
        
        for i in range(len(self.inimigos)):
            inimigo = self.inimigos[i]
            
            if (inimigo['y'] >= self.screen.get_height()):
                
                #Aumento de dificuldade a cada "onda" de inimigos
                self.dificuldade += 1/300

                 # Quando o inimigo atinge o centro, remove o inimigo atual
                self.inimigos.pop(i)
                
                # Cria um novo inimigo 
                self.set_inimigos(col="red", quantidade=1)
                # Importante: Depois de remover o inimigo, deve-se interromper esse ciclo
                # A operação de pop altera o tamanho da lista, então interrompemos o loop para reiniciar a iteração
                
                

                break
        
    def set_inimigos_spawn(self):
        for inimigo in self.inimigos:
                inimigo['x'] = random.randint(0, self.screen.get_width())
                inimigo['y'] = random.randint(0, 50)

    def collision_check(self):

        for i in range(len(self.inimigos)):
            inimigo = self.inimigos[i]

            #self.mpx, self.mpy = pygame.mouse.get_pos()
            pmi_x, pmi_y = self.prota.pmi_x, self.prota.pmi_y
        
            if self.Prota_mask.overlap(inimigo['mask'], (inimigo['x'] - pmi_x, inimigo['y'] - pmi_y)):
                col = "blue"
                self.vidas -= 1
            else:
                col = "red"
            
            inimigo['surface'].fill(col)
            self.screen.blit(inimigo['surface'], (inimigo['x'], inimigo['y']))

        if self.vidas == 0:
            pygame.QUIT()

            
